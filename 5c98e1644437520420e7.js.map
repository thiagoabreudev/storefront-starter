{"version":3,"sources":["webpack:///./node_modules/@ecomplus/storefront-app/src/views/Confirmation.vue?6c53","webpack:///./node_modules/@ecomplus/storefront-app/src/views/js/Confirmation.js","webpack:///./node_modules/@ecomplus/storefront-app/src/views/js/Confirmation.js?a541","webpack:///./node_modules/@ecomplus/storefront-app/src/views/Confirmation.vue"],"names":["name","components","EcOrderInfo","data","canUpsertCart","computed","mapGetters","orderId","this","$route","params","id","order","get","orders","find","_id","set","concat","stateOrder","Object","assign","push","setOrders","methods","mapMutations","mapActions","handleUpsertCart","status","ecomCart","completed","upsertCart","then","resetCart","created","customer","ecomPassport","checkAuthorization","main_email","doc_number","fetchLogin","saveCustomer","mounted","component","_vm","_h","$createElement","_c","_self","attrs","on","$event"],"mappings":"8HAAA,I,0tBCMe,ICNiH,EDMjH,CACbA,KAAM,eAENC,WAAY,CACVC,Y,OAAAA,GAGFC,KAAI,KACK,CACLC,eAAe,IAInBC,SAAU,EAAF,GACHC,YAAW,CACZ,SACA,aAHI,CAMNC,UACE,OAAOC,KAAKC,OAAOC,OAAOC,IAG5BC,MAAO,CACLC,MACE,OAAOL,KAAKM,OAAOC,KAAK,EAAGC,SAAUA,IAAQR,KAAKD,UAAY,CAAES,IAAKR,KAAKD,UAE5EU,IAAKL,GACH,GAAIA,GAASA,EAAMI,MAAQR,KAAKD,QAAS,CACvC,MAAMO,EAASN,KAAKM,OAAOI,SACrBC,EAAaL,EAAOC,KAAK,EAAGC,SAAUA,IAAQJ,EAAMI,KACtDG,EACFC,OAAOC,OAAOF,EAAYP,GAE1BE,EAAOQ,KAAKV,GAEdJ,KAAKe,UAAUT,QAMvBU,QAAS,EAAF,GACFC,YAAa,CACd,WACA,YACA,cAJG,GAMFC,YAAW,CACZ,iBAPG,CAULC,mBACE,GAAInB,KAAKJ,cAAe,CACtBI,KAAKJ,eAAgB,EADC,MAEdwB,EAAWpB,KAAKI,MAAhBgB,OACJA,GAAqB,cAAXA,IACZC,IAAS1B,KAAK2B,WAAY,EACtBtB,KAAKD,UACFsB,IAAS1B,KAAKW,SACjBe,IAAS1B,KAAKW,OAAS,IAEzBe,IAAS1B,KAAKW,OAAOQ,KAAKd,KAAKD,UAEjCwB,cAAaC,KAAKxB,KAAKyB,gBAM/BC,UAAW,MACDC,EAAa3B,KAAb2B,SACHC,IAAaC,sBACZF,EAASG,YAAcH,EAASI,YAClCH,IAAaI,WAAWL,EAASG,WAAYH,EAASI,YAAYP,KAAK,KACrExB,KAAKiC,aAAa,CAAEL,mBACpB5B,KAAKmB,sBAMbe,UACMN,IAAaC,sBACf7B,KAAKmB,qB,QEnFPgB,EAAY,YACd,GHRW,WAAa,IAAIC,EAAIpC,KAASqC,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,iBAAiB,CAACF,EAAG,gBAAgB,CAACE,MAAM,CAAC,MAAQL,EAAIhC,MAAM,OAAQ,GAAMsC,GAAG,CAAC,eAAe,SAASC,GAAQP,EAAIhC,MAAMuC,OAAY,KACvO,IGUpB,EACA,KACA,KACA,MAIa,UAAAR,E","file":"5c98e1644437520420e7.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"confirmation\"}},[_c('ec-order-info',{attrs:{\"order\":_vm.order,\"isNew\":true},on:{\"update:order\":function($event){_vm.order=$event}}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { mapGetters, mapMutations, mapActions } from 'vuex'\nimport ecomCart from '@ecomplus/shopping-cart'\nimport ecomPassport from '@ecomplus/passport-client'\nimport { upsertCart } from './../../lib/sync-cart-to-api'\nimport EcOrderInfo from './../../components/EcOrderInfo.vue'\n\nexport default {\n  name: 'confirmation',\n\n  components: {\n    EcOrderInfo\n  },\n\n  data () {\n    return {\n      canUpsertCart: true\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'orders',\n      'customer'\n    ]),\n\n    orderId () {\n      return this.$route.params.id\n    },\n\n    order: {\n      get () {\n        return this.orders.find(({ _id }) => _id === this.orderId) || { _id: this.orderId }\n      },\n      set (order) {\n        if (order && order._id === this.orderId) {\n          const orders = this.orders.concat()\n          const stateOrder = orders.find(({ _id }) => _id === order._id)\n          if (stateOrder) {\n            Object.assign(stateOrder, order)\n          } else {\n            orders.push(order)\n          }\n          this.setOrders(orders)\n        }\n      }\n    }\n  },\n\n  methods: {\n    ...mapMutations([\n      'addOrder',\n      'setOrders',\n      'resetCart'\n    ]),\n    ...mapActions([\n      'saveCustomer'\n    ]),\n\n    handleUpsertCart () {\n      if (this.canUpsertCart) {\n        this.canUpsertCart = false\n        const { status } = this.order\n        if (status && status !== 'cancelled') {\n          ecomCart.data.completed = true\n          if (this.orderId) {\n            if (!ecomCart.data.orders) {\n              ecomCart.data.orders = []\n            }\n            ecomCart.data.orders.push(this.orderId)\n          }\n          upsertCart().then(this.resetCart)\n        }\n      }\n    }\n  },\n\n  created () {\n    const { customer } = this\n    if (!ecomPassport.checkAuthorization()) {\n      if (customer.main_email && customer.doc_number) {\n        ecomPassport.fetchLogin(customer.main_email, customer.doc_number).then(() => {\n          this.saveCustomer({ ecomPassport })\n          this.handleUpsertCart()\n        })\n      }\n    }\n  },\n\n  mounted () {\n    if (ecomPassport.checkAuthorization()) {\n      this.handleUpsertCart()\n    }\n  }\n}\n","import mod from \"-!../../../../../babel-loader/lib/index.js??ref--1!./Confirmation.js?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../babel-loader/lib/index.js??ref--1!./Confirmation.js?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Confirmation.vue?vue&type=template&id=04aaefc8&\"\nimport script from \"./js/Confirmation.js?vue&type=script&lang=js&\"\nexport * from \"./js/Confirmation.js?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}