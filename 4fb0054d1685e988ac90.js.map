{"version":3,"sources":["webpack:///./node_modules/@ecomplus/storefront-template/template/js/lib/fetch-info.js"],"names":["window","_info","fetchInfoPromises","modulesToFetch","endpoint","Object","keys","utm","length","push","reqOptions","method","data","forEach","modInfo","promise","Promise","resolve","modules","url","then","result","Array","isArray","field","val","error","response","undefined","monthly_interest","max_number","value","emitter","emit","catch","err","console","finally","all"],"mappings":"giBAIAA,OAAOC,MAAQD,OAAOC,OAAS,GAC/B,IAAMC,EAAoB,GACpBC,EAAiB,CACrB,CAAEC,SAAU,iBACZ,CAAEA,SAAU,uBAEVC,OAAOC,KAAKC,KAAKC,QACnBL,EAAeM,KAAK,CAClBL,SAAU,iBACVM,WAAY,CACVC,OAAQ,OACRC,KAAM,CAAEL,YAKdJ,EAAeU,SAAQ,YAA8B,IAA3BT,EAA2B,EAA3BA,SAAUM,EAAiB,EAAjBA,WAC5BI,EAAU,GAChBd,OAAOC,MAAMG,GAAYU,EAEzB,IAAMC,EAAU,IAAIC,SAAQ,SAAAC,GAC1BC,kB,+VAAQ,CAAD,CACLC,IAAK,IAAF,OAAMf,EAAN,UACAM,IAGFU,MAAK,YAAc,IACVC,EADU,EAAXT,KACCS,OACJC,MAAMC,QAAQF,IAChBA,EAAOR,SAAQ,YAAyB,IAEhCW,EAAOC,EAFGC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvB,IAAKD,EAGH,OAAQtB,GACN,IAAK,qBAGgB,iBADnBqB,EAAME,EADNH,EAAQ,oCAE2CI,IAAnBd,EAAQU,IAAwBC,EAAMX,EAAQU,MAC5EV,EAAQU,GAASC,GAEnB,MAEF,IAAK,iBAEHA,EAAME,EADNH,EAAQ,2BAEKV,EAAQU,IACnBC,EAAII,iBAAmBf,EAAQU,GAAOK,kBACtCJ,EAAIK,WAAahB,EAAQU,GAAOM,cAChChB,EAAQU,GAASC,IAGnBA,EAAME,EADNH,EAAQ,uBAEKV,EAAQU,IAAUC,EAAIM,MAAQjB,EAAQU,GAAOO,SACxDjB,EAAQU,GAASC,GAEnB,MAEF,SAEEA,EAAME,EADNH,EAAQ,gCAEKV,EAAQU,IAAUC,EAAIM,MAAQjB,EAAQU,GAAOO,SACxDjB,EAAQU,GAASC,OAM7BO,IAAQC,KAAR,eAAqB7B,GAAYU,MAGlCoB,OAAM,SAAAC,GACLC,QAAQV,MAAMS,GACdH,IAAQC,KAAR,eAAqB7B,GAAY+B,MAGlCE,QAAQpB,MAGbf,EAAkBO,KAAKM,MAGzBC,QAAQsB,IAAIpC,GACTkB,MAAK,kBAAMY,IAAQC,KAAK,OAAQjC,OAAOC","file":"4fb0054d1685e988ac90.js","sourcesContent":["import { modules } from '@ecomplus/client'\nimport emitter from './emitter'\nimport utm from './persist-utm'\n\nwindow._info = window._info || {}\nconst fetchInfoPromises = []\nconst modulesToFetch = [\n  { endpoint: 'list_payments' },\n  { endpoint: 'calculate_shipping' }\n]\nif (Object.keys(utm).length) {\n  modulesToFetch.push({\n    endpoint: 'apply_discount',\n    reqOptions: {\n      method: 'post',\n      data: { utm }\n    }\n  })\n}\n\nmodulesToFetch.forEach(({ endpoint, reqOptions }) => {\n  const modInfo = {}\n  window._info[endpoint] = modInfo\n\n  const promise = new Promise(resolve => {\n    modules({\n      url: `/${endpoint}.json`,\n      ...reqOptions\n    })\n\n      .then(({ data }) => {\n        const { result } = data\n        if (Array.isArray(result)) {\n          result.forEach(({ error, response }) => {\n            if (!error) {\n              let field, val\n\n              switch (endpoint) {\n                case 'calculate_shipping':\n                  field = 'free_shipping_from_value'\n                  val = response[field]\n                  if (typeof val === 'number' && (modInfo[field] === undefined || val < modInfo[field])) {\n                    modInfo[field] = val\n                  }\n                  break\n\n                case 'list_payments':\n                  field = 'installments_option'\n                  val = response[field]\n                  if (val && (!modInfo[field] ||\n                    val.monthly_interest < modInfo[field].monthly_interest ||\n                    val.max_number > modInfo[field].max_number)) {\n                    modInfo[field] = val\n                  }\n                  field = 'discount_option'\n                  val = response[field]\n                  if (val && (!modInfo[field] || val.value > modInfo[field].value)) {\n                    modInfo[field] = val\n                  }\n                  break\n\n                default:\n                  field = 'available_extra_discount'\n                  val = response[field]\n                  if (val && (!modInfo[field] || val.value > modInfo[field].value)) {\n                    modInfo[field] = val\n                  }\n              }\n            }\n          })\n        }\n        emitter.emit(`info:${endpoint}`, modInfo)\n      })\n\n      .catch(err => {\n        console.error(err)\n        emitter.emit(`info:${endpoint}`, err)\n      })\n\n      .finally(resolve)\n  })\n\n  fetchInfoPromises.push(promise)\n})\n\nPromise.all(fetchInfoPromises)\n  .then(() => emitter.emit('info', window._info))\n"],"sourceRoot":""}